[[plugins]] # 入力補完プラグイン
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
call ddc#custom#patch_global('sources', ['nvim-lsp', 'around', 'vsnip'])
call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \ 'matchers': ['matcher_head'],
      \ 'sorters': ['sorter_rank'],
      \ 'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {'mark': 'A'},
      \ 'nvim-lsp': {
      \ 'mark': 'L',
      \ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \ },
      \ })

call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })

inoremap <silent><expr> <TAB>
      \ ddc#map#pum_visible() ? '<C-n>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#map#manual_complete()
inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

autocmd CompleteDone * silent! pclose!

call ddc#enable()
'''

[[plugins]] # 行の周辺の単語を候補として抽出
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]] # 入力中の文字列に基づいて候補から絞り込みを行う
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]] # 候補の一覧をマッチした順やすでに入力されている順でソートする
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]] # 同じ単語を重複して補完するのを防ぐ
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]] # Neovim Builtin LSPが提供する構文を引っ張ってくる
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]] # スニペット
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
imap <expr> <Tab> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
smap <expr> <Tab> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<S-Tab>'
let g:vsnip_filetypes = {}
'''

[[plugins]] # スニペット
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]] # スニペット
repo = 'rafamadriz/friendly-snippets'

[[plugins]] # Nvim LSPの設定
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source = '''
lua << EOF
local mason = require("mason")
mason.setup({
  ui = {
    icons = {
      package_installed = "✓",
      package_pending = "➜",
      package_uninstalled = "✗"
    }
  }
})

local mason_lsp = require("mason-lspconfig")
mason_lsp.setup()
mason_lsp.setup_handlers({ function(server_name)
  local on_attach = function(client, bufnr)
    local set = vim.keymap.set
    set('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>')
    set('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>')
    set('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>')
    set('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>')
    set('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>')
    set('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>')
    set('n', 'g[', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>')
    set('n', 'g]', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>')
    set('n', 'J', '<cmd>lua vim.lsp.buf.formatting()<CR>')
  end
    require("lspconfig")[server_name].setup {
      on_attach = on_attach
    }
  end
})
EOF
'''

[[plugins]] # LSP, DAP, Linter, Formatter
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'

[[plugins]] # LSP, DAP, Linter, Formatterの管理
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'nvim-lspconfig'
